openapi: 3.0.3
info:
  title: Employee Management API
  description: |
    This is a REST API for managing employees.
    It provides operations to create, read, update, and delete employee records.
  version: 1.0.0
  contact:
    name: API Support
    email:
          x-constraints: |
            @jakarta.validation.constraints.Email(message = "must be a valid email address" support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: /api
    description: Default server URL

tags:
  - name: Employee
    description: Employee management operations

paths:
  /employees:
    get:
      tags:
        - Employee
      summary: Get all employees
      description: Retrieves a list of all employees
      operationId: getAllEmployees
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      tags:
        - Employee
      summary: Create a new employee
      description: Creates a new employee with the provided details
      operationId: createEmployee
      requestBody:
        description: Employee object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRequest'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/{id}:
    get:
      tags:
        - Employee
      summary: Get employee by ID
      description: Retrieves a specific employee by their unique identifier
      operationId: getEmployeeById
      parameters:
        - name: id
          in: path
          description: ID of the employee to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Employee
      summary: Update an existing employee
      description: Updates the details of an existing employee
      operationId: updateEmployee
      parameters:
        - name: id
          in: path
          description: ID of the employee to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated employee object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRequest'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Employee
      summary: Delete an employee
      description: Deletes an employee by their unique identifier
      operationId: deleteEmployee
      parameters:
        - name: id
          in: path
          description: ID of the employee to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Employee deleted successfully
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    EmployeeRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - hireDate
      properties:
        firstName:
          type: string
          description: The employee's first name
          example: John
        lastName:
          type: string
          description: The employee's last name
          example: Doe
        email:
          x-constraints: |
            @jakarta.validation.constraints.Email(message = "must be a valid email address"
          type: string
          format: email
          description: The employee's email address
          example: john.doe@example.com
        department:
          type: string
          description: The employee's department
          example: Engineering
        position:
          type: string
          description: The employee's job title/position
          example: Senior Software Engineer
        hireDate:
          type: string
          format: date
          description: The date when the employee was hired
          example: '2023-01-15'
        active:
          type: boolean
          description: Whether the employee is currently active
          default: true

    EmployeeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The employee's unique identifier
          example: 1
        firstName:
          type: string
          description: The employee's first name
          example: John
        lastName:
          type: string
          description: The employee's last name
          example: Doe
        email:
          x-constraints: |
            @jakarta.validation.constraints.Email(message = "must be a valid email address"
          type: string
          format: email
          description: The employee's email address
          example: john.doe@example.com
        department:
          type: string
          description: The employee's department
          example: Engineering
        position:
          type: string
          description: The employee's job title/position
          example: Senior Software Engineer
        hireDate:
          type: string
          format: date
          description: The date when the employee was hired
          example: '2023-01-15'
        active:
          type: boolean
          description: Whether the employee is currently active
          example: true
        version:
          type: integer
          format: int64
          description: Version number for optimistic locking
          example: 1

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: The date and time when the error occurred
        status:
          type: integer
          description: The HTTP status code
        error:
          type: string
          description: The error name/type
        message:
          type: string
          description: A human-readable error message
        path:
          type: string
          description: The API endpoint path where the error occurred

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
